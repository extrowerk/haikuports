SUMMARY="High level abstract threading library"
DESCRIPTION="Threading Building Blocks (TBB) is a C++ template library \
developed by Intel for parallel programming on multi-core processors. Using \
TBB, a computation is broken down into tasks that can run in parallel. The \
library manages and schedules threads to execute these tasks."
HOMEPAGE="https://www.threadingbuildingblocks.org/"
COPYRIGHT="2005-2019 Intel Corporation"
LICENSE="Apache v2"
REVISION="1"
SOURCE_URI="https://github.com/01org/tbb/archive/${portVersion/./_U}.tar.gz"
CHECKSUM_SHA256="7b1fd8caea14be72ae4175896510bf99c809cd7031306a1917565e6de7382fba"
SOURCE_DIR="tbb-${portVersion/./_U}"
PATCHES="tbb-$portVersion.patchset"

ARCHITECTURES="!x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	tbb$secondaryArchSuffix = $portVersion
	lib:libirml$secondaryArchSuffix = $portVersion
	lib:libtbb$secondaryArchSuffix = $portVersion
	lib:libtbbmalloc$secondaryArchSuffix = $portVersion
	lib:libtbbmalloc_proxy$secondaryArchSuffix = $portVersion
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

PROVIDES_devel="
	tbb${secondaryArchSuffix}_devel = $portVersion
	devel:libirml$secondaryArchSuffix = $portVersion
	devel:libtbb$secondaryArchSuffix = $portVersion
	devel:libtbbmalloc$secondaryArchSuffix = $portVersion
	devel:libtbbmalloc_proxy$secondaryArchSuffix = $portVersion
	"
REQUIRES_devel="
	tbb$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	"
BUILD_PREREQUIRES="
	cmd:find
	cmd:gcc$secondaryArchSuffix
	cmd:make
	"

defineDebugInfoPackage tbb$secondaryArchSuffix \
	$libDir/libirml.so.1 \
	$libDir/libtbb.so.2 \
	$libDir/libtbbmalloc.so.2 \
	$libDir/libtbbmalloc_proxy.so.2

BUILD()
{
	if [ "$effectiveTargetArchitecture" != x86_64 ]; then
		make arch=ia32 $jobArgs
		make rml arch=ia32 $jobArgs
	else
		make $jobArgs
		make rml $jobArgs
	fi
}

INSTALL()
{
	mkdir -p $libDir $includeDir

	pushd build
	LIB_LOCATION=`find . -maxdepth 1 -type d |grep release`
	for f in libirml libtbb libtbbmalloc libtbbmalloc_proxy; do
		cp $LIB_LOCATION/$f.so* $libDir
	done
	popd

	cp -R include/serial include/tbb $includeDir

	prepareInstalledDevelLibs libirml libtbb libtbbmalloc libtbbmalloc_proxy

	# devel package
	packageEntries devel $developDir
}

TEST()
{
	pushd build
	DEBUG_LIB_LOCATION=`find . -maxdepth 1 -type d |grep debug`
	RELEASE_LIB_LOCATION=`find . -maxdepth 1 -type d |grep release`
	popd

	# Needs a universal solution...
	export LIBRARY_PATH="$sourceDir/build/$DEBUG_LIB_LOCATION${LIBRARY_PATH:+:$LIBRARY_PATH}"
	export LIBRARY_PATH="$sourceDir/build/$RELEASE_LIB_LOCATION${LIBRARY_PATH:+:$LIBRARY_PATH}"
	make test -j 4
}
