From 37a9a8c37e0b314c4c14bc8e66e644717ad7e05c Mon Sep 17 00:00:00 2001
From: CodeforEvolution <themysterymail555@gmail.com>
Date: Sun, 3 Sep 2017 21:29:17 -0500
Subject: Add Haiku Implementation



diff --git a/Makefile.am b/Makefile.am
index 5f07dba..557414f 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -467,5 +467,15 @@ libuv_la_SOURCES += src/unix/pthread-fixes.c \
                     src/unix/proctitle.c
 endif
 
+if HAIKU
+libuv_la_CFLAGS += -D_BSD_SOURCE
+libuv_la_SOURCES += src/unix/bsd-ifaddrs.c \
+                    src/unix/haiku.cpp \
+                    src/unix/no-fsevents.c \
+                    src/unix/no-proctitle.c \
+                    src/unix/posix-hrtime.c \
+                    src/unix/posix-poll.c
+endif
+
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = @PACKAGE_NAME@.pc
diff --git a/configure.ac b/configure.ac
index c3a6a77..348fa65 100644
--- a/configure.ac
+++ b/configure.ac
@@ -23,6 +23,7 @@ AC_CANONICAL_HOST
 AC_ENABLE_SHARED
 AC_ENABLE_STATIC
 AC_PROG_CC
+AC_PROG_CXX
 AM_PROG_CC_C_O
 AS_IF([AS_CASE([$host_os],[openedition*],  [false], [true])], [
   CC_CHECK_CFLAGS_APPEND([-pedantic])
@@ -42,13 +43,17 @@ m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 LT_INIT
 # TODO(bnoordhuis) Check for -pthread vs. -pthreads
 AC_CHECK_LIB([dl], [dlopen])
+AC_CHECK_LIB([root], [dlopen])
 AC_CHECK_LIB([kstat], [kstat_lookup])
 AC_CHECK_LIB([nsl], [gethostbyname])
+AC_CHECK_LIB([network], [gethostbyname])
 AC_CHECK_LIB([perfstat], [perfstat_cpu])
 AC_CHECK_LIB([pthread], [pthread_mutex_init])
 AC_CHECK_LIB([rt], [clock_gettime])
+AC_CHECK_LIB([root], [clock_gettime])
 AC_CHECK_LIB([sendfile], [sendfile])
 AC_CHECK_LIB([socket], [socket])
+AC_CHECK_LIB([network], [socket])
 AC_SYS_LARGEFILE
 AM_CONDITIONAL([AIX],      [AS_CASE([$host_os],[aix*],          [true], [false])])
 AM_CONDITIONAL([ANDROID],  [AS_CASE([$host_os],[linux-android*],[true], [false])])
@@ -57,6 +62,7 @@ AM_CONDITIONAL([DARWIN],   [AS_CASE([$host_os],[darwin*],       [true], [false])
 AM_CONDITIONAL([DRAGONFLY],[AS_CASE([$host_os],[dragonfly*],    [true], [false])])
 AM_CONDITIONAL([FREEBSD],  [AS_CASE([$host_os],[*freebsd*],     [true], [false])])
 AM_CONDITIONAL([LINUX],    [AS_CASE([$host_os],[linux*],        [true], [false])])
+AM_CONDITIONAL([HAIKU],    [AS_CASE([$host_os],[haiku*],        [true], [false])])
 AM_CONDITIONAL([MSYS],     [AS_CASE([$host_os],[msys*],         [true], [false])])
 AM_CONDITIONAL([NETBSD],   [AS_CASE([$host_os],[netbsd*],       [true], [false])])
 AM_CONDITIONAL([OPENBSD],  [AS_CASE([$host_os],[openbsd*],      [true], [false])])
@@ -66,6 +72,9 @@ AM_CONDITIONAL([WINNT],    [AS_CASE([$host_os],[mingw*],        [true], [false])
 AS_CASE([$host_os],[mingw*], [
     LIBS="$LIBS -lws2_32 -lpsapi -liphlpapi -lshell32 -luserenv -luser32"
 ])
+AS_CASE([$host_os],[haiku*], [
+    LIBS="$LIBS -lroot -lbe -lnetwork -lshared"
+])
 AS_CASE([$host_os], [netbsd*], [AC_CHECK_LIB([kvm], [kvm_open])])
 AC_CHECK_HEADERS([sys/ahafs_evProds.h])
 AC_CONFIG_FILES([Makefile libuv.pc])
diff --git a/include/uv/errno.h b/include/uv/errno.h
index 8eeb95d..00d6d5c 100644
--- a/include/uv/errno.h
+++ b/include/uv/errno.h
@@ -248,7 +248,7 @@
 # define UV__ENOENT (-4058)
 #endif
 
-#if defined(ENOMEM) && !defined(_WIN32)
+#if defined(ENOMEM) && !defined(_WIN32) && !defined(__HAIKU__)
 # define UV__ENOMEM UV__ERR(ENOMEM)
 #else
 # define UV__ENOMEM (-4057)
diff --git a/include/uv/unix.h b/include/uv/unix.h
index 74a0d64..3fc8229 100644
--- a/include/uv/unix.h
+++ b/include/uv/unix.h
@@ -62,7 +62,7 @@
       defined(__OpenBSD__)         || \
       defined(__NetBSD__)
 # include "uv/bsd.h"
-#elif defined(__CYGWIN__) || defined(__MSYS__)
+#elif defined(__CYGWIN__) || defined(__MSYS__) || defined(__HAIKU__)
 # include "uv/posix.h"
 #endif
 
diff --git a/src/unix/bsd-ifaddrs.c b/src/unix/bsd-ifaddrs.c
index 0d02154..d0b3ba1 100644
--- a/src/unix/bsd-ifaddrs.c
+++ b/src/unix/bsd-ifaddrs.c
@@ -25,12 +25,20 @@
 #include <errno.h>
 #include <stddef.h>
 
+#if !defined(__HAIKU__)
 #include <ifaddrs.h>
+#else
+#include <bsd/ifaddrs.h>
+#endif
 #include <net/if.h>
 #if !defined(__CYGWIN__) && !defined(__MSYS__)
 #include <net/if_dl.h>
 #endif
 
+#ifndef IFF_RUNNING
+#define IFF_RUNNING 0x0001 
+#endif
+
 static int uv__ifaddr_exclude(struct ifaddrs *ent, int exclude_type) {
   if (!((ent->ifa_flags & IFF_UP) && (ent->ifa_flags & IFF_RUNNING)))
     return 1;
@@ -45,7 +53,7 @@ static int uv__ifaddr_exclude(struct ifaddrs *ent, int exclude_type) {
   if (exclude_type == UV__EXCLUDE_IFPHYS)
     return (ent->ifa_addr->sa_family != AF_LINK);
 #endif
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__DragonFly__) || defined(__HAIKU__)
   /*
    * On BSD getifaddrs returns information related to the raw underlying
    * devices.  We're not interested in this information.
diff --git a/src/unix/core.c b/src/unix/core.c
index c2e7bd7..74061c0 100644
--- a/src/unix/core.c
+++ b/src/unix/core.c
@@ -56,6 +56,19 @@
 # endif
 #endif
 
+#ifdef __HAIKU__
+# include <fcntl.h>
+# if defined(O_CLOEXEC)
+#  define UV__O_CLOEXEC O_CLOEXEC
+# endif
+# if !defined(FIONCLEX)
+#  define FIONCLEX        0x5450
+# endif
+# if !defined(FIOCLEX)
+#  define FIOCLEX         0x5451
+# endif
+#endif
+
 #if defined(__DragonFly__)      || \
     defined(__FreeBSD__)        || \
     defined(__FreeBSD_kernel__) || \
@@ -944,7 +957,7 @@ int uv_getrusage(uv_rusage_t* rusage) {
   rusage->ru_stime.tv_sec = usage.ru_stime.tv_sec;
   rusage->ru_stime.tv_usec = usage.ru_stime.tv_usec;
 
-#if !defined(__MVS__)
+#if !defined(__MVS__) && !defined(__HAIKU__)
   rusage->ru_maxrss = usage.ru_maxrss;
   rusage->ru_ixrss = usage.ru_ixrss;
   rusage->ru_idrss = usage.ru_idrss;
@@ -961,6 +974,23 @@ int uv_getrusage(uv_rusage_t* rusage) {
   rusage->ru_nivcsw = usage.ru_nivcsw;
 #endif
 
+#if defined(__HAIKU__)
+  rusage->ru_maxrss = 0;
+  rusage->ru_ixrss = 0;
+  rusage->ru_idrss = 0;
+  rusage->ru_isrss = 0;
+  rusage->ru_minflt = 0;
+  rusage->ru_majflt = 0;
+  rusage->ru_nswap = 0;
+  rusage->ru_inblock = 0;
+  rusage->ru_oublock = 0;
+  rusage->ru_msgsnd = 0;
+  rusage->ru_msgrcv = 0;
+  rusage->ru_nsignals = 0;
+  rusage->ru_nvcsw = 0;
+  rusage->ru_nivcsw = 0;
+#endif
+
   return 0;
 }
 
diff --git a/src/unix/haiku.cpp b/src/unix/haiku.cpp
new file mode 100644
index 0000000..ae5591f
--- /dev/null
+++ b/src/unix/haiku.cpp
@@ -0,0 +1,220 @@
+/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to
+ * deal in the Software without restriction, including without limitation the
+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+ * sell copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+extern "C" {
+#include "uv.h"
+#include "internal.h"
+}
+
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <assert.h>
+#include <errno.h>
+
+#include <sys/types.h>
+#include <sys/resource.h>
+#include <time.h>
+#include <stdlib.h>
+#include <fcntl.h>
+
+#include <Directory.h>
+#include <Entry.h>
+#include <image.h>
+#include <OS.h>
+#include <Path.h>
+#include <String.h>
+
+#include <private/shared/cpu_type.h>
+
+static void* args_mem = NULL;
+static char** process_argv = NULL;
+static int process_argc = 0;
+static char* process_title_ptr = NULL;
+
+int uv_exepath(char* buffer, size_t* size) {
+  const char* str;
+  image_info info;
+  int32 cookie = 0;
+  size_t strSize;
+    
+  if (buffer == NULL || size == NULL || *size == 0)
+    return -EINVAL;
+
+  while (get_next_image_info(0, &cookie, &info) == B_OK) {
+    if (info.type == B_APP_IMAGE) {
+      break;
+    }
+  }
+
+  BEntry entry(info.name, true);
+  BPath path;
+  status_t rc = entry.GetPath(&path);  /* (path) now has binary's path. */
+  if (rc != B_OK)
+    return -errno;
+  rc = path.GetParent(&path); /* chop filename, keep directory. */
+  if (rc != B_OK)
+    return -errno;
+  str = path.Path();
+
+  strSize -= 1;
+  *size -= 1;
+	
+  strSize = sizeof str;
+  if (*size > strSize)
+    *size = strSize;
+
+  memcpy(buffer, str, *size);
+  buffer[*size] = '\0';
+
+  return 0;
+}
+
+uint64_t uv_get_free_memory(void) {
+  uint64 free_memory;
+
+  system_info info;
+  get_system_info(&info);
+
+  free_memory = (info.free_memory) * B_PAGE_SIZE;
+
+  return (uint64_t)free_memory;
+}
+
+
+uint64_t uv_get_total_memory(void) {
+  uint64 total_memory;
+
+  system_info info;
+  get_system_info(&info);
+
+  total_memory = (info.max_pages + info.ignored_pages) * B_PAGE_SIZE;
+
+  return (uint64_t)total_memory;
+}
+
+
+void uv_loadavg(double avg[3]) {
+  //Does not exist on Haiku...
+  avg[0] = avg[1] = avg[2] = 0;
+}
+
+int uv_resident_set_memory(size_t* rss) {
+  area_info areaInfo;
+  long int cookie = 0;
+  team_info teamInfo;
+  thread_info threadInfo;
+	
+  get_thread_info(find_thread(NULL), &threadInfo);
+  get_team_info(threadInfo.team, &teamInfo);
+	
+  while (get_next_area_info(teamInfo.team, &cookie, &areaInfo) == B_OK)
+  {
+    *rss += areaInfo.ram_size;
+  }
+
+  return 0;
+}
+
+
+int uv_uptime(double* uptime) {
+  *uptime = (double)system_time() / 1000000; 
+
+  return 0;
+}
+
+
+int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count) {
+  BString cpuStr;  
+  cpu_topology_node_info* topology = NULL;
+  int numcpus;
+  system_info sysInfo;
+  uint32 infoCount;
+  uint32 topologyNodeCount = 0;
+  uv_cpu_info_t* cpu_info;
+	
+  get_system_info(&sysInfo);
+
+  numcpus = (int)sysInfo.cpu_count;
+
+  *cpu_infos = new uv_cpu_info_t[numcpus * sizeof(**cpu_infos)];
+  if (!(*cpu_infos))
+    return -ENOMEM;
+
+  *count = numcpus;
+
+  get_cpu_topology_info(NULL, &topologyNodeCount);
+  if (topologyNodeCount != 0)
+    topology = new cpu_topology_node_info[topologyNodeCount];
+  get_cpu_topology_info(topology, &topologyNodeCount);
+
+  enum cpu_platform platform = B_CPU_UNKNOWN;
+  enum cpu_vendor cpuVendor = B_CPU_VENDOR_UNKNOWN;
+  uint32 cpuModel = 0;
+  for (int i = 0; i < topologyNodeCount; i++) {
+    switch (topology[i].type) {
+      case B_TOPOLOGY_ROOT:
+        platform = topology[i].data.root.platform;
+        break;
+      case B_TOPOLOGY_PACKAGE:
+        cpuVendor = topology[i].data.package.vendor;
+		break;
+      case B_TOPOLOGY_CORE:
+        cpuModel = topology[i].data.core.model;
+        break;
+
+      default:
+        break;
+    }
+  }
+
+  delete[] topology;
+
+  cpuStr << get_cpu_vendor_string(cpuVendor)
+    << " " << get_cpu_model_string(platform, cpuVendor, cpuModel);
+
+  for (int i = 0; i < numcpus; i++) {
+    cpu_info = &(*cpu_infos)[i];
+
+  //Can't be implemented in Haiku
+  cpu_info->cpu_times.user = 0;
+  cpu_info->cpu_times.nice = 0;
+  cpu_info->cpu_times.sys = 0;
+  cpu_info->cpu_times.idle = 0;
+  cpu_info->cpu_times.irq = 0;
+
+  cpu_info->model = uv__strdup(cpuStr.String());
+  cpu_info->speed = (int)get_rounded_cpu_speed();
+  }
+
+  return 0;
+}
+
+
+void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count) {
+  int i;
+
+  for (i = 0; i < count; i++) {
+    delete cpu_infos[i].model;
+  }
+
+  delete[] cpu_infos;
+}
diff --git a/src/unix/internal.h b/src/unix/internal.h
index b0c5dca..ca3a2ad 100644
--- a/src/unix/internal.h
+++ b/src/unix/internal.h
@@ -177,7 +177,8 @@ struct uv__stream_queued_fds_s {
     defined(__FreeBSD_kernel__) || \
     defined(__linux__) || \
     defined(__OpenBSD__) || \
-    defined(__NetBSD__)
+    defined(__NetBSD__) || \
+    defined(__HAIKU__)
 #define uv__cloexec uv__cloexec_ioctl
 #define uv__nonblock uv__nonblock_ioctl
 #else
diff --git a/test/test-fs-copyfile.c b/test/test-fs-copyfile.c
index eadff54..bc536ee 100644
--- a/test/test-fs-copyfile.c
+++ b/test/test-fs-copyfile.c
@@ -23,7 +23,8 @@
 #include "task.h"
 
 #if defined(__unix__) || defined(__POSIX__) || \
-    defined(__APPLE__) || defined(_AIX) || defined(__MVS__)
+    defined(__APPLE__) || defined(_AIX) || defined(__MVS__) || \
+    defined(__HAIKU__)
 #include <unistd.h> /* unlink, etc. */
 #else
 # include <direct.h>
diff --git a/test/test-fs.c b/test/test-fs.c
index 57da398..2dfdbbc 100644
--- a/test/test-fs.c
+++ b/test/test-fs.c
@@ -29,7 +29,8 @@
 
 /* FIXME we shouldn't need to branch in this file */
 #if defined(__unix__) || defined(__POSIX__) || \
-    defined(__APPLE__) || defined(_AIX) || defined(__MVS__)
+    defined(__APPLE__) || defined(_AIX) || defined(__MVS__) || \
+    defined(__HAIKU__)
 #include <unistd.h> /* unlink, rmdir, etc. */
 #else
 # include <winioctl.h>
diff --git a/uv.gyp b/uv.gyp
index 8aaf541..85841bb 100644
--- a/uv.gyp
+++ b/uv.gyp
@@ -181,7 +181,7 @@
               [ 'OS=="zos" and uv_library=="shared_library"', {
                 'ldflags': [ '-Wl,DLL' ],
               }],
-              ['OS != "solaris" and OS != "android" and OS != "zos"', {
+              ['OS != "solaris" and OS != "android" and OS != "zos" and OS != "haiku"', {
                 'ldflags': [ '-pthread' ],
               }],
             ],
@@ -346,6 +346,19 @@
             'src/unix/os390-syscalls.c'
           ]
         }],
+        ['OS=="haiku"', {
+          'sources': [
+            'src/unix/bsd-ifaddrs.c',
+            'src/unix/haiku.cpp',
+            'src/unix/no-fsevents.c',
+            'src/unix/no-proctitle.c',
+            'src/unix/posix-hrtime.c',
+            'src/unix/posix-poll.c'
+          ],
+          'defines': [
+            '_BSD_SOURCE',
+          ]
+        }]
       ]
     },
   ]
-- 
2.16.4

