SUMMARY="Fast C library for the Discrete Fourier Transform"
DESCRIPTION="FFTW is a C subroutine library for computing the discrete \
Fourier transform (DFT) in one or more dimensions, of arbitrary input size, \
and of both real and complex data (as well as of even/odd data, i.e. the \
discrete cosine/sine transforms or DCT/DST). We believe that FFTW, which is \
free software, should become the FFT library of choice for most applications.
Our benchmarks, performed on on a variety of platforms, show that FFTW's \
performance is typically superior to that of other publicly available FFT \
software, and is even competitive with vendor-tuned codes. In contrast to \
vendor-tuned codes, however, FFTW's performance is portable: the same program \
will perform well on most architectures without modification. Hence the name, \
FFTW, which stands for the somewhat whimsical title of Fastest Fourier \
Transform in the West."
HOMEPAGE="http://www.fftw.org/"
COPYRIGHT="2003, 2007-2011 Matteo Frigo
	2003, 2007-2011 Massachusetts Institute of Technology"
LICENSE="GNU GPL v2"
REVISION="2"
SOURCE_URI="http://www.fftw.org/fftw-$portVersion.tar.gz"
CHECKSUM_SHA256="6113262f6e92c5bd474f2875fa1b01054c4ad5040f6b0da7c03c98821d9ae303"
SOURCE_DIR="fftw-$portVersion"

ARCHITECTURES="!x86_gcc2 x86 x86_64"
SECONDARY_ARCHITECTURES="!x86_gcc2 x86"

libVersion="3.5.8"
libVersionCompat="$libVersion compat >= ${libVersion%%.*}"

PROVIDES="
	fftw$secondaryArchSuffix = $portVersion compat >= 3
	cmd:fftw_wisdom$secondaryArchSuffix
	cmd:fftwl_wisdom$secondaryArchSuffix
	cmd:fftwq_wisdom$secondaryArchSuffix
	cmd:fftw_wisdom_to_conf$secondaryArchSuffix
	cmd:fftwf_wisdom$secondaryArchSuffix
	lib:libfftw3$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3_threads$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3f$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3f_threads$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3l$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3l_threads$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3q$secondaryArchSuffix = $libVersionCompat
	lib:libfftw3q_threads$secondaryArchSuffix = $libVersionCompat

	"
REQUIRES="
	haiku$secondaryArchSuffix
	lib:libquadmath$secondaryArchSuffix
	"

PROVIDES_devel="
	fftw${secondaryArchSuffix}_devel = $portVersion compat >= 3
	devel:libfftw3$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3_threads$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3f$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3f_threads$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3l$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3l_threads$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3q$secondaryArchSuffix = $libVersionCompat
	devel:libfftw3q_threads$secondaryArchSuffix = $libVersionCompat
	"
REQUIRES_devel="
	fftw$secondaryArchSuffix == $portVersion base
	"

BUILD_REQUIRES="
	haiku${secondaryArchSuffix}_devel
	devel:libgfortran$secondaryArchSuffix
	"
BUILD_PREREQUIRES="
	cmd:awk
	cmd:cmp
	cmd:diff
	cmd:find
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:perl
	"

defineDebugInfoPackage fftw$secondaryArchSuffix \
	"$libDir"/libfftw3.so.$libVersion \
	"$libDir"/libfftw3_threads.so.$libVersion \
	"$libDir"/libfftw3f.so.$libVersion \
	"$libDir"/libfftw3f_threads.so.$libVersion \
	"$libDir"/libfftw3l.so.$libVersion \
	"$libDir"/libfftw3l_threads.so.$libVersion \
	"$libDir"/libfftw3q.so.$libVersion \
	"$libDir"/libfftw3q_threads.so.$libVersion

BUILD()
{
	mkdir -p double long-double quad float

	CONFIGURE="--enable-shared --enable-threads"
if [ "$effectiveTargetArchitecture" != x86_gcc2 ]; then
	CONFIGURE_X86="--enable-sse2 --enable-avx --enable-avx2 --enable-avx512"
fi

	# build double-precision version
	cd double
	runConfigure ../configure \
		$CONFIGURE \
		$CONFIGURE_X86
	make $jobArgs
	cd ..

	# build long-double-precision version
	cd long-double
	runConfigure ../configure \
		--enable-long-double \
		$CONFIGURE
	make $jobArgs
	cd ..

	# build long-quad-precision version
	cd quad
	runConfigure ../configure \
		--enable-quad-precision \
		$CONFIGURE
	make $jobArgs
	cd ..

	# build float-precision version
	cd float
	runConfigure ../configure \
		--enable-float \
		$CONFIGURE \
		$CONFIGURE_X86
	make $jobArgs
	cd ..
}

INSTALL()
{
	for f in double long-double quad float; do
		cd $f
		make install
		cd ..
	done

	rm $libDir/libfftw*.la

	prepareInstalledDevelLibs \
		libfftw3 \
		libfftw3_threads \
		libfftw3f \
		libfftw3f_threads \
		libfftw3l \
		libfftw3l_threads \
		libfftw3q \
		libfftw3q_threads
	fixPkgconfig

	packageEntries devel \
		$developDir \
		$libDir/cmake
}

TEST()
{
	for f in double long-double quad float; do
		cd $f
		make check
		cd ..
	done
}
