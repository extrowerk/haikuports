From 3b33c1830c12b32a01fb565b8b193bd18ed6ddf3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Sun, 29 Apr 2018 21:46:16 +0200
Subject: Preliminary patches


diff --git a/src/LocaleHelper.cpp b/src/LocaleHelper.cpp
index b60c3d8..9bef758 100644
--- a/src/LocaleHelper.cpp
+++ b/src/LocaleHelper.cpp
@@ -28,6 +28,7 @@ std::locale LocaleHelper::bfsDefaultLocale;
 
 bool LocaleHelper::init()
 {
+
     // Check and set locale (avoids errors caused by invalid locales later like #420)
     try
     {
@@ -49,6 +50,22 @@ bool LocaleHelper::init()
             System::setEnvVar("LC_ALL", "C");
             newLocale = bfs::path::imbue(std::locale());
         }
+#elif __HAIKU__
+        // Don't change the locale on OSX. Using "" fails with 'locale::facet::_S_create_c_locale name not valid'
+        std::locale newLocale;
+        try
+        {
+            newLocale = bfs::path::imbue(std::locale());
+        } catch(std::exception& e)
+        {
+            std::cerr << "Caught an exception while setting locale: " << e.what() << std::endl
+                      << "Setting LC_ALL=\"C\" and trying again..." << std::endl;
+            System::setEnvVar("LC_ALL", "C");
+            newLocale = bfs::path::imbue(std::locale());
+        }
+#elif defined(__HAIKU__2)
+		/* LC_ALL not defined on Haiku */
+		setenv("LC_ALL","C",1);
 #else
         // In linux we use the system locale but change the codecvt facet to the one boost is using (Assumed to be correct for our system)
         std::locale newLocale("");
diff --git a/src/System.cpp b/src/System.cpp
index fbede59..10aac31 100644
--- a/src/System.cpp
+++ b/src/System.cpp
@@ -255,6 +255,7 @@ bfs::path System::getExecutablePath()
 #undef BEOS
 #undef BSD
 #undef CYGWIN
+#undef HAIKU
 #undef HPUX
 #undef IRIX
 #undef LINUX
@@ -271,7 +272,7 @@ bfs::path System::getExecutablePath()
 #undef BSD_NET
 #undef BSD_OPEN
 #define RTTR_BOOST_OS_LIST                                                                                                         \
-    (AIX)(AMIGAOS)(ANDROID)(BEOS)(BSD)(CYGWIN)(HPUX)(IRIX)(LINUX)(MACOS)(OS400)(QNX)(SOLARIS)(UNIX)(SVR4)(VMS)(WINDOWS)(BSD_BSDI)( \
+    (AIX)(AMIGAOS)(ANDROID)(BEOS)(BSD)(CYGWIN)(HAIKU)(HPUX)(IRIX)(LINUX)(MACOS)(OS400)(QNX)(SOLARIS)(UNIX)(SVR4)(VMS)(WINDOWS)(BSD_BSDI)( \
       BSD_DRAGONFLY)(BSD_FREE)(BSD_NET)(BSD_OPEN)
 
 #undef BORLAND
diff --git a/src/getExecutablePath.cpp b/src/getExecutablePath.cpp
index 069e193..ca572fe 100644
--- a/src/getExecutablePath.cpp
+++ b/src/getExecutablePath.cpp
@@ -88,6 +88,23 @@ std::string getExecutablePath()
     return ret;
 }
 
+#elif(BOOST_OS_HAIKU)
+
+std::string getExecutablePath()
+{
+    std::string ret = "";
+    if(ret.empty())
+        return "";
+    bfs::path p(ret);
+    if(!p.has_root_directory())
+    {
+        boost::system::error_code ec;
+        p = bfs::canonical(p, ec);
+        ret = (ec) ? "" : p.make_preferred().string();
+    }
+    return ret;
+}
+
 #elif(BOOST_OS_BSD)
 
 #include <sys/sysctl.h>
-- 
2.16.2

