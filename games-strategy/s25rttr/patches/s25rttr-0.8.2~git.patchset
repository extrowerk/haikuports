From 57901d4283c4138d4810e3ce5c00abc7878843ba Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Zolt=C3=A1n=20Mizsei?= <zmizsei@extrowerk.com>
Date: Sun, 29 Apr 2018 20:37:04 +0200
Subject: Haiku supporting patches


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 336d334..6336b04 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -472,7 +472,7 @@ endif()
 # Start script
 IF (WIN32)
 	install(PROGRAMS "release/bin/rttr.bat" DESTINATION "${RTTR_BINDIR}")
-ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR CYGWIN)
+ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR CYGWIN OR HAIKU)
 	install(PROGRAMS "release/bin/rttr.sh" DESTINATION "${RTTR_BINDIR}")
 ELSEIF(NOT APPLE)
 	message(FATAL_ERROR "${CMAKE_SYSTEM_NAME} not supported")
diff --git a/cmake/haiku.cmake b/cmake/haiku.cmake
new file mode 100644
index 0000000..b17941d
--- /dev/null
+++ b/cmake/haiku.cmake
@@ -0,0 +1,5 @@
+# set compiler flags
+IF(RTTR_ENABLE_OPTIMIZATIONS)
+	FORCE_ADD_FLAGS(CMAKE_C_FLAGS -O2 -g -std=c11 -D_BSD_SOURCE)
+	FORCE_ADD_FLAGS(CMAKE_CXX_FLAGS -O2 -g -std=c++11 -D_BSD_SOURCE)
+ENDIF(RTTR_ENABLE_OPTIMIZATIONS)
diff --git a/cmake/toolchains/c.haiku.x86_64.cmake b/cmake/toolchains/c.haiku.x86_64.cmake
new file mode 100644
index 0000000..75431b5
--- /dev/null
+++ b/cmake/toolchains/c.haiku.x86_64.cmake
@@ -0,0 +1,6 @@
+INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../Modules/CMakeMacroSetCCache.cmake")
+
+# this one is important
+SET(CMAKE_SYSTEM_NAME Haiku)
+SET(CMAKE_SYSTEM_PROCESSOR x86_64)
+
diff --git a/rttrConfig/RttrConfig.cpp b/rttrConfig/RttrConfig.cpp
index fc152d4..9f6c9ba 100644
--- a/rttrConfig/RttrConfig.cpp
+++ b/rttrConfig/RttrConfig.cpp
@@ -44,16 +44,16 @@ bfs::path RttrConfig::GetPrefixPath()
     // Get path to current executable (at least for checks)
     bfs::path fullExeFilepath = System::getExecutablePath();
     // This should always work unless we have some missing implementation or a bad error
-    if(fullExeFilepath.empty())
-    {
-        LOG.write("Could not get path to current executable\n", LogTarget::Stderr);
-        return "";
-    }
-    if(!bfs::exists(fullExeFilepath) || !bfs::is_regular_file(fullExeFilepath))
-    {
-        LOG.write("Executable not at '%1%'\n", LogTarget::Stderr) % fullExeFilepath;
-        return "";
-    }
+//    if(fullExeFilepath.empty())
+//    {
+//        LOG.write("Could not get path to current executable\n", LogTarget::Stderr);
+//        return "";
+//    }
+//    if(!bfs::exists(fullExeFilepath) || !bfs::is_regular_file(fullExeFilepath))
+//    {
+//        LOG.write("Executable not at '%1%'\n", LogTarget::Stderr) % fullExeFilepath;
+//        return "";
+//    }
 
     bfs::path rttrBinDir(RTTR_BINDIR);
 
@@ -132,14 +132,14 @@ bool RttrConfig::Init()
     bfs::current_path(prefixPath_);
     homePath = System::getHomePath();
     pathMappings.clear();
-    pathMappings["BIN"] = RTTR_BINDIR;
-    pathMappings["EXTRA_BIN"] = RTTR_EXTRA_BINDIR;
-    pathMappings["DATA"] = RTTR_DATADIR;
-    pathMappings["GAME"] = RTTR_GAMEDIR;
-    pathMappings["LIB"] = RTTR_LIBDIR;
-    pathMappings["DRIVER"] = RTTR_DRIVERDIR;
-    pathMappings["RTTR"] = RTTR_DATADIR "/RTTR";
-    pathMappings["CONFIG"] = RTTR_SETTINGSDIR;
-    pathMappings["USERDATA"] = RTTR_SETTINGSDIR;
+//    pathMappings["BIN"] = RTTR_BINDIR;
+//    pathMappings["EXTRA_BIN"] = RTTR_EXTRA_BINDIR;
+//    pathMappings["DATA"] = RTTR_DATADIR;
+//    pathMappings["GAME"] = RTTR_GAMEDIR;
+//    pathMappings["LIB"] = RTTR_LIBDIR;
+//    pathMappings["DRIVER"] = RTTR_DRIVERDIR;
+//    pathMappings["RTTR"] = RTTR_DATADIR "/RTTR";
+//    pathMappings["CONFIG"] = RTTR_SETTINGSDIR;
+//    pathMappings["USERDATA"] = RTTR_SETTINGSDIR;
     return true;
 }
diff --git a/src/s25client/s25client.cpp b/src/s25client/s25client.cpp
index 1e3538f..efe0de2 100644
--- a/src/s25client/s25client.cpp
+++ b/src/s25client/s25client.cpp
@@ -423,6 +423,11 @@ int RunProgram(po::variables_map& options)
  */
 int main(int argc, char** argv)
 {
+//	#if defined(__HAIKU__)
+//		/* LC_ALL not defined on Haiku */
+//		setenv("LC_ALL","C",1);
+//	#endif
+
     bnw::args(argc, argv);
 
     po::options_description desc("Allowed options");
diff --git a/src/test/s25Test.cpp b/src/test/s25Test.cpp
index 03ecf46..0ac021d 100644
--- a/src/test/s25Test.cpp
+++ b/src/test/s25Test.cpp
@@ -49,6 +49,11 @@ struct TestSetup
 {
     TestSetup()
     {
+//	#if defined(__HAIKU__)
+//		/* LC_ALL not defined on Haiku */
+//		setenv("LC_ALL","C",1);
+//	#endif
+
         if(!LocaleHelper::init())
             throw std::runtime_error("Could not init locale");
         // Don't write to file
-- 
2.16.2

